function [v_num, v, v_p] = variomino_variants(mp, np, p_num, p, d)
% VARIOMINO_VARIANTS Finds all variants of chrominoes by rotation and reflection.
%
% Given an array of chrominoes, each represented as matrices with values from 
% 1 to v (occupied) or 0 (empty), this function returns all distinct variants 
% generated by rotations and reflections. Only chrominoes indicated by positive 
% entries in d are processed.
%
% Inputs:
%   mp, np  - Integers, dimensions of input matrices p.
%   p_num  - Integer, number of chrominoes provided.
%   p           - Integer matrix array (mp x np x p_num), each chromino stored 
%                  "top-left tight" (nonzero in first row and column).
%   d           - Integer vector (p_num x 1), specifies number of copies to use. 
%                  If d(i) <= 0, no variants are generated for chromino i.
%
% Outputs:
%   v_num  - Integer, number of distinct variants found.
%   v           - Integer matrix array (mp x np x v_num), the variants.
%   v_p       - Integer vector (v_num x 1), indicating parent chromino index for each variant.
%
% Licensing:
%   This code is covered by the GNU General Public License (GPL).
%   See the LICENSE file for details.
%   (SPDX-License-Identifier: GPL-3.0-or-later)
%
% Modified:
%   26 March 2025
%
% Author:
%   John Burkardt

  v_num = 0;
  v = [];
  v_p = [];

  for l = 1 : p_num

    if (1 <= d(l))

      q = variomino_condense(p(:, :, l));
      [mq, nq] = size(q);

      for reflect = 0 : 1
        for rotate = 0 : 4

          s = variomino_transform(q, rotate, reflect);
          [ms, ns] = size(s);

          if (ms <= mp && ns <= np)

            t = zeros(mp, np);
            t(1:ms, 1:ns) = s;

            different = true;
            for k = 1 : v_num
              if (isequal(t, v(:, :, k)))
                different = false;
                break;
              end
            end

            if (different)
              v_num = v_num + 1;
              v(:, :, v_num) = t;
              v_p(v_num) = l;
            end

          end

        end
      end

    end

  end

end