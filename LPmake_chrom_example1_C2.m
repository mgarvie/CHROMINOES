function [p_shapes, r_shape, p_num, d] = LPmake_chrom_example1_C2()
% LPMAKE_CHROM_EXAMPLE1_C2 Constructs an LP system for tiling a checkerboard-coloured 
% 120-by-120 region using chromatic variants of a tetromino, based on a precomputed 
% solution vector with two colours.
%
% Outputs:
%   p_shapes - 3D binary array of selected polyominoes.
%   r_shape   - Binary matrix representing the coloured region to tile.
%   p_num     - Number of distinct chromino variants used (# nonzero entries in solution).
%   d              - Vector specifying the number of copies of each chromino variant.
%
% Instructions:
%   Before running this script, you must save a particular solution vector `x` 
%   (obtained from solving the LP file COLOUR_EXAMPLE1_C2 generated by 
%   LPMAKE_COLOUR_EXAMPLE1_C2) into a file named 'x.mat' in the current directory.
%   Use the following MATLAB command:
%
%     save('x.mat', 'x');
%
% Licensing:
%   This code is covered by the GNU General Public License (GPL).
%   See the LICENSE file for details.
%   (SPDX-License-Identifier: GPL-3.0-or-later)
%
% Modified:
%   26 March 2025
%
% Author:
%   Marcus Garvie

  % Number of colours
  C = 2;

  % Define the C-coloured checkerboard target region
  One = ones(120, 120);
  variants = colour_C_variants(One, C);
  r_shape = variants(:, :, C-1);  % Ensure a 1 in position (1,1)

  % Load precomputed solution vector (must be saved as x.mat)
  data = load('x.mat');
  soln = data.x;
  displayVectorComponents(soln);
  len = length(soln);

  % Extract number of copies of each chromino used
  d = soln(soln ~= 0).';

  % Count number of distinct chromino variants used 
  p_num = length(d);

  % Initialize array to store used chromino shapes
  p_shapes = zeros(120, 120, p_num);

  % Generate all chromino variants of the base tetromino
  P1 = [1 0 0;
           1 1 1];
  chrom1 = FindAllChrom(P1, C);
  num_chrom1 = size(chrom1, 3);

  % Pack all chrominoes into a large array
  chrom_all = zeros(120, 120, len);
  count = 0;
  for page = 1:num_chrom1
    count = count + 1;
    chrom_all(1:2, 1:3, count) = chrom1(:, :, page);
  end

  % Select and store only the chrominoes used in the solution
  count = 0;
  for i = 1:len
    if soln(i) ~= 0
      count = count + 1;
      p_shapes(:, :, count) = chrom_all(:, :, i);
    end
  end

  % Construct the constraint matrix for the chromino tiling problem
  [A, b, ~] = variomino_matrix(r_shape, p_num, p_shapes, d);
  [m, n] = size(A);

  % Display matrix dimensions
  fprintf('\n');
  fprintf('Number of constraints (rows): %d\n', m);
  fprintf('Number of variables (columns): %d\n', n);

  % Write the linear program to file
  filename = 'chrom_example1_C2.lp';
  label = '\ LP file chrom_example1_C2';
  variants_lp_write_mono(filename, label, A, b, d);

  % Notify user of file creation
  fprintf('\n');
  fprintf('LPmake_chrom_example1_C2 created the LP file "%s"\n', filename);

end